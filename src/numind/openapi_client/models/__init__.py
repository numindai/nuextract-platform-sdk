# coding: utf-8

# flake8: noqa
"""
NuMind Extraction Platform

 # Workflow for Using NuExtract API for Information Extraction  ## Creating and Managing Projects  A **Project** in NuExtract 2.0 serves as the **main entity** for organizing and managing an **information extraction task**. It provides a structured approach to processing and extracting data from multiple documents using a **shared template**.  1. **Create a Project**: A project stores the template for information extraction and can optionally include extraction examples to improve model performance. 2. **Define a Template**: The template specifies what information should be extracted from documents within this project. If needed, a template can be derived from a free-form description using the `/api/infer-template` endpoint. 3. **Managing Project Examples**:    - Project examples (optional) help refine model accuracy and consistency.    - They serve as **ICL (In-Context Learning) examples** during inference and represent tuples of (input, output).    - Only examples that match the current project template are used in inference calls.    - Examples are managed via the ***examples*** endpoints (CRUD operations), requiring a project ID. 4. **Storing Inference Playground Items**:    - Inference results can be stored within the **project playground** without adding them as ICL examples.    - This ensures that outputs are retained without affecting inference behavior or increasing token usage.  ## Performing Inference  Inference can be conducted on both **text and images**. If a file is in another format, it is **automatically converted to an image** in the background when possible. The inference response includes a `docId`, which should be used when managing project examples. For non-text/image files, only their converted image equivalents are accessible via `docId`.  Inference **temperature** can be set in the project settings. It controls variability in extraction inference responses. **RasterizationDpi** sets the dots per inch resolution when converting non-text files to images. Allowed range is (0, 300]  ## Locking a Project  The **locking mechanism** allows you to prevent accidental modifications while still permitting inference. When locked: - The **template and project examples** cannot be modified. - Project settings such as **temperature** and **rasterizationDpi** are also restricted. - Users can still perform inference and work with project playground. - This feature is useful in **production environments** to maintain consistency.  ## Project Ownership and Permissions  A project is owned by either a **user** (`ownerUser`) or an **organization** (`ownerOrganization`). If a user leaves an organization, they lose access to its resources, even if they originally created them.  ## Additional Features  - **Duplication**: Projects can be **copied**, including examples but **excluding playground**. - **Deletion**: Removing a project **deletes all associated examples and playground items**. - **Sharing**: Projects can be shared with the community â€” in other words, they can be designated as **reference projects**. Sharing and unsharing require **Numind administrator access rights**. - **Reference Projects**: These are **static, predefined projects** created by the Numind team to serve as examples of extraction tasks. The inference is allowed for all users. However, reference projects cannot be modified but can be **copied**, allowing users to make changes to their duplicates.  By structuring projects efficiently, leveraging examples, and using locking mechanisms, users can ensure **accurate, reproducible, and well-managed** information extraction workflows in NuExtract 2.0.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

# import models into model package
from numind.openapi_client.models.api_key_response import ApiKeyResponse
from numind.openapi_client.models.create_or_update_api_key import CreateOrUpdateApiKey
from numind.openapi_client.models.create_or_update_example_request import (
    CreateOrUpdateExampleRequest,
)
from numind.openapi_client.models.create_or_update_playground_item_request import (
    CreateOrUpdatePlaygroundItemRequest,
)
from numind.openapi_client.models.create_project_request import CreateProjectRequest
from numind.openapi_client.models.document_info import DocumentInfo
from numind.openapi_client.models.document_response import DocumentResponse
from numind.openapi_client.models.error import Error
from numind.openapi_client.models.example_response import ExampleResponse
from numind.openapi_client.models.health_response import HealthResponse
from numind.openapi_client.models.image_info import ImageInfo
from numind.openapi_client.models.inference_response import InferenceResponse
from numind.openapi_client.models.information_response import InformationResponse
from numind.openapi_client.models.invalid_information import InvalidInformation
from numind.openapi_client.models.playground_item_response import PlaygroundItemResponse
from numind.openapi_client.models.project_response import ProjectResponse
from numind.openapi_client.models.project_settings_response import (
    ProjectSettingsResponse,
)
from numind.openapi_client.models.raw_result import RawResult
from numind.openapi_client.models.service_status import ServiceStatus
from numind.openapi_client.models.template_request import TemplateRequest
from numind.openapi_client.models.text_info import TextInfo
from numind.openapi_client.models.text_request import TextRequest
from numind.openapi_client.models.token_code_request import TokenCodeRequest
from numind.openapi_client.models.token_refresh_request import TokenRefreshRequest
from numind.openapi_client.models.token_request import TokenRequest
from numind.openapi_client.models.token_response import TokenResponse
from numind.openapi_client.models.update_project_request import UpdateProjectRequest
from numind.openapi_client.models.update_project_settings_request import (
    UpdateProjectSettingsRequest,
)
from numind.openapi_client.models.user import User
from numind.openapi_client.models.valid_information import ValidInformation
from numind.openapi_client.models.version_response import VersionResponse
