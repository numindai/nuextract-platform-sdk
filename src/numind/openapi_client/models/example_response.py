# coding: utf-8

"""
NuMind extraction platform

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from numind.openapi_client.models.document_info import DocumentInfo
from numind.openapi_client.models.information_response import InformationResponse
from typing import Optional, Set
from typing_extensions import Self


class ExampleResponse(BaseModel):
    """
    ExampleResponse
    """  # noqa: E501

    id: StrictStr
    project_id: StrictStr = Field(alias="projectId")
    owner_user: StrictStr = Field(alias="ownerUser")
    document_info: DocumentInfo = Field(alias="documentInfo")
    result: InformationResponse
    created_at: StrictStr = Field(alias="createdAt")
    updated_at: StrictStr = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = [
        "id",
        "projectId",
        "ownerUser",
        "documentInfo",
        "result",
        "createdAt",
        "updatedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExampleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_info
        if self.document_info:
            _dict["documentInfo"] = self.document_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict["result"] = self.result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExampleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "projectId": obj.get("projectId"),
                "ownerUser": obj.get("ownerUser"),
                "documentInfo": DocumentInfo.from_dict(obj["documentInfo"])
                if obj.get("documentInfo") is not None
                else None,
                "result": InformationResponse.from_dict(obj["result"])
                if obj.get("result") is not None
                else None,
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
