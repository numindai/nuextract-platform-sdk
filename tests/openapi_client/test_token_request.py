"""
NuMind Extraction Platform

 # Workflow for Using NuExtract API for Information Extraction  ## Creating and Managing Projects  A **Project** in NuExtract 2.0 serves as the **main entity** for organizing and managing an **information extraction task**. It provides a structured approach to processing and extracting data from multiple documents using a **shared template**.  1. **Create a Project**: A project stores the template for information extraction and can optionally include extraction examples to improve model performance. 2. **Define a Template**: The template specifies what information should be extracted from documents within this project. If needed, a template can be derived from a free-form description using the `/api/infer-template` endpoint. 3. **Managing Project Examples**:    - Project examples (optional) help refine model accuracy and consistency.    - They serve as **ICL (In-Context Learning) examples** during inference and represent tuples of (input, output).    - Only examples that match the current project template are used in inference calls.    - Examples are managed via the ***examples*** endpoints (CRUD operations), requiring a project ID. 4. **Storing Inference Playground Items**:    - Inference results can be stored within the **project playground** without adding them as ICL examples.    - This ensures that outputs are retained without affecting inference behavior or increasing token usage.  ## Performing Inference  Inference can be conducted on both **text and images**. If a file is in another format, it is **automatically converted to an image** in the background when possible. The inference response includes a `docId`, which should be used when managing project examples. For non-text/image files, only their converted image equivalents are accessible via `docId`.  Inference **temperature** can be set in the project settings. It controls variability in extraction inference responses. **RasterizationDpi** sets the dots per inch resolution when converting non-text files to images. Allowed range is (0, 300]  ## Locking a Project  The **locking mechanism** allows you to prevent accidental modifications while still permitting inference. When locked: - The **template and project examples** cannot be modified. - Project settings such as **temperature** and **rasterizationDpi** are also restricted. - Users can still perform inference and work with project playground. - This feature is useful in **production environments** to maintain consistency.  ## Project Ownership and Permissions  A project is owned by either a **user** (`ownerUser`) or an **organization** (`ownerOrganization`). If a user leaves an organization, they lose access to its resources, even if they originally created them.  ## Additional Features  - **Duplication**: Projects can be **copied**, including examples but **excluding playground**. - **Deletion**: Removing a project **deletes all associated examples and playground items**. - **Sharing**: Projects can be shared with the community â€” in other words, they can be designated as **reference projects**. Sharing and unsharing require **Numind administrator access rights**. - **Reference Projects**: These are **static, predefined projects** created by the Numind team to serve as examples of extraction tasks. The inference is allowed for all users. However, reference projects cannot be modified but can be **copied**, allowing users to make changes to their duplicates.  By structuring projects efficiently, leveraging examples, and using locking mechanisms, users can ensure **accurate, reproducible, and well-managed** information extraction workflows in NuExtract 2.0.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from numind.openapi_client.models.token_request import TokenRequest


class TestTokenRequest(unittest.TestCase):
    """TokenRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TokenRequest:
        """
        Test TokenRequest
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included
        """
        # uncomment below to create an instance of `TokenRequest`
        """
        model = TokenRequest()
        if include_optional:
            return TokenRequest(
                code = '',
                redirect_uri = '',
                type = 'ai.numind.extract.shared.TokenCodeRequest',
                token = ''
            )
        else:
            return TokenRequest(
                code = '',
                redirect_uri = '',
                type = 'ai.numind.extract.shared.TokenCodeRequest',
                token = '',
        )
        """

    def testTokenRequest(self):
        """Test TokenRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
